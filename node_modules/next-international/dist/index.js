"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/index.ts
var src_exports = {};
__export(src_exports, {
  createI18n: () => createI18n,
  createT: () => createT,
  flattenLocale: () => flattenLocale
});
module.exports = __toCommonJS(src_exports);

// src/pages/index.ts
var import_react5 = require("react");

// src/common/create-define-locale.ts
function createDefineLocale() {
  return function defineLocale(locale) {
    return locale;
  };
}

// src/helpers/log.ts
function log(type, message) {
  if (process.env.NODE_ENV !== "production") {
    console[type](`[next-international] ${message}`);
  }
  return null;
}
var warn = (message) => log("warn", message);
var error = (message) => log("error", message);

// src/common/flatten-locale.ts
var flattenLocale = (locale, prefix = "") => Object.entries(locale).reduce(
  (prev, [name, value]) => __spreadValues(__spreadValues({}, prev), typeof value === "string" ? { [prefix + name]: value } : flattenLocale(value, `${prefix}${name}.`)),
  {}
);

// src/pages/create-get-locale-props.ts
function createGetLocaleProps(locales) {
  return function getLocaleProps(initialGetProps) {
    return (context) => __async(this, null, function* () {
      const initialResult = yield initialGetProps == null ? void 0 : initialGetProps(context);
      if (!context.locale) {
        error(`'i18n.defaultLocale' not defined in 'next.config.js'`);
        return initialResult || { props: {} };
      }
      const load = locales[context.locale];
      return __spreadProps(__spreadValues({}, initialResult), {
        props: __spreadProps(__spreadValues({}, initialResult == null ? void 0 : initialResult.props), {
          locale: flattenLocale((yield load()).default)
        })
      });
    });
  };
}

// src/pages/create-i18n-provider.tsx
var import_router = require("next/router");
var import_react = __toESM(require("react"));
function createI18nProvider(I18nContext, locales) {
  return function I18nProvider({
    locale: baseLocale,
    fallback = null,
    fallbackLocale,
    children
  }) {
    const { locale, defaultLocale, locales: nextLocales } = (0, import_router.useRouter)();
    const [clientLocale, setClientLocale] = (0, import_react.useState)();
    const initialLoadRef = (0, import_react.useRef)(true);
    (0, import_react.useEffect)(() => {
      function checkConfigMatch([first, second]) {
        const notDefined = first[1].filter((locale2) => !second[1].includes(locale2));
        if (notDefined.length > 0) {
          warn(
            `The following locales are defined in '${first[0]}' but not in '${second[0]}': ${notDefined.join(", ")}`
          );
        }
      }
      const createI18n2 = ["createI18n", Object.keys(locales)];
      const nextConfig = ["next.config.js", nextLocales || []];
      checkConfigMatch([createI18n2, nextConfig]);
      checkConfigMatch([nextConfig, createI18n2]);
    }, [nextLocales]);
    const loadLocale = (0, import_react.useCallback)((locale2) => {
      locales[locale2]().then((content) => {
        setClientLocale(flattenLocale(content.default));
      });
    }, []);
    (0, import_react.useEffect)(() => {
      if (!baseLocale && locale && initialLoadRef.current) {
        loadLocale(locale);
      }
      if (locale && !initialLoadRef.current) {
        loadLocale(locale);
      }
      initialLoadRef.current = false;
    }, [baseLocale, loadLocale, locale]);
    const value = (0, import_react.useMemo)(
      () => {
        var _a;
        return {
          localeContent: clientLocale || baseLocale,
          fallbackLocale: fallbackLocale ? flattenLocale(fallbackLocale) : void 0,
          locale: (_a = locale != null ? locale : defaultLocale) != null ? _a : ""
        };
      },
      [clientLocale, baseLocale, fallbackLocale, locale, defaultLocale]
    );
    if (!locale || !defaultLocale) {
      return error(`'i18n.defaultLocale' not defined in 'next.config.js'`);
    }
    if (!nextLocales) {
      return error(`'i18n.locales' not defined in 'next.config.js'`);
    }
    if (!clientLocale && !baseLocale) {
      return fallback;
    }
    return /* @__PURE__ */ import_react.default.createElement(I18nContext.Provider, { value }, children);
  };
}

// src/pages/create-use-change-locale.ts
var import_router2 = require("next/router");
function createUseChangeLocale() {
  return function useChangeLocale() {
    const { push, asPath } = (0, import_router2.useRouter)();
    return function changeLocale(newLocale) {
      push(asPath, void 0, { locale: newLocale, shallow: true });
    };
  };
}

// src/common/create-use-i18n.ts
var import_react3 = require("react");

// src/common/create-t.ts
var import_react2 = require("react");
function createT(context, scope) {
  const { localeContent, fallbackLocale } = context;
  const content = fallbackLocale && typeof localeContent === "string" ? fallbackLocale : Object.assign(fallbackLocale != null ? fallbackLocale : {}, localeContent);
  const pluralKeys = new Set(
    Object.keys(content).filter((key) => key.includes("#")).map((key) => key.split("#", 1)[0])
  );
  const pluralRules = new Intl.PluralRules(context.locale);
  function getPluralKey(count) {
    if (count === 0)
      return "zero";
    return pluralRules.select(count);
  }
  function t(key, ...params) {
    var _a, _b;
    const paramObject = params[0];
    let isPlural = false;
    if (paramObject && "count" in paramObject) {
      const isPluralKey = scope ? pluralKeys.has(`${scope}.${key}`) : pluralKeys.has(key);
      if (isPluralKey) {
        key = `${key}#${getPluralKey(paramObject.count)}`;
        isPlural = true;
      }
    }
    let value = scope ? content[`${scope}.${key}`] : content[key];
    if (!value && isPlural) {
      const baseKey = key.split("#", 1)[0];
      value = (_a = content[`${baseKey}#other`] || key) == null ? void 0 : _a.toString();
    } else {
      value = (_b = value || key) == null ? void 0 : _b.toString();
    }
    if (!paramObject) {
      return value;
    }
    let isString = true;
    const result = value == null ? void 0 : value.split(/({[^}]*})/).map((part, index) => {
      const match = part.match(/{(.*)}/);
      if (match) {
        const param = match[1];
        const paramValue = paramObject[param];
        if ((0, import_react2.isValidElement)(paramValue)) {
          isString = false;
          return (0, import_react2.cloneElement)(paramValue, { key: `${String(param)}-${index}` });
        }
        return paramValue;
      }
      return part;
    });
    return isString ? result == null ? void 0 : result.join("") : result;
  }
  return t;
}

// src/common/create-use-i18n.ts
function createUsei18n(I18nClientContext) {
  return function useI18n() {
    const context = (0, import_react3.useContext)(I18nClientContext);
    if (!context) {
      throw new Error("`useI18n` must be used inside `I18nProvider`");
    }
    return (0, import_react3.useMemo)(() => createT(context, void 0), [context]);
  };
}

// src/common/create-use-scoped-i18n.ts
var import_react4 = require("react");
function createScopedUsei18n(I18nClientContext) {
  return function useScopedI18n(scope) {
    const context = (0, import_react4.useContext)(I18nClientContext);
    if (!context) {
      throw new Error("`useI18n` must be used inside `I18nProvider`");
    }
    return (0, import_react4.useMemo)(() => createT(context, scope), [context, scope]);
  };
}

// src/pages/create-use-current-locale.ts
var import_router3 = require("next/router");
function createUseCurrentLocale() {
  return function useCurrentLocale() {
    const { locale } = (0, import_router3.useRouter)();
    return locale;
  };
}

// src/pages/index.ts
function createI18n(locales) {
  const I18nContext = (0, import_react5.createContext)(null);
  const I18nProvider = createI18nProvider(I18nContext, locales);
  const useI18n = createUsei18n(I18nContext);
  const useScopedI18n = createScopedUsei18n(I18nContext);
  const useChangeLocale = createUseChangeLocale();
  const defineLocale = createDefineLocale();
  const getLocaleProps = createGetLocaleProps(locales);
  const useCurrentLocale = createUseCurrentLocale();
  return {
    useI18n,
    useScopedI18n,
    I18nProvider,
    useChangeLocale,
    defineLocale,
    getLocaleProps,
    useCurrentLocale
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createI18n,
  createT,
  flattenLocale
});
