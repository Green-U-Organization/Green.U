"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/app/server/index.ts
var server_exports = {};
__export(server_exports, {
  createI18nServer: () => createI18nServer,
  setStaticParamsLocale: () => setStaticParamsLocale
});
module.exports = __toCommonJS(server_exports);
var import_server_only = require("server-only");

// src/app/server/get-locale-cache.tsx
var import_headers = require("next/headers");
var import_react = require("react");

// src/common/constants.ts
var LOCALE_HEADER = "X-Next-Locale";
var LOCALE_COOKIE = "Next-Locale";
var DEFAULT_SEGMENT_NAME = "locale";

// src/app/server/get-locale-cache.tsx
var import_navigation = require("next/navigation");

// src/helpers/log.ts
function log(type, message) {
  if (process.env.NODE_ENV !== "production") {
    console[type](`[next-international] ${message}`);
  }
  return null;
}
var error = (message) => log("error", message);

// src/app/server/get-locale-cache.tsx
var getLocale = (0, import_react.cache)(() => ({ current: void 0 }));
var getStaticParamsLocale = () => getLocale().current;
var setStaticParamsLocale = (value) => {
  getLocale().current = value;
};
var getLocaleCache = (0, import_react.cache)(() => __async(void 0, null, function* () {
  var _a;
  let locale;
  locale = getStaticParamsLocale();
  if (!locale) {
    try {
      locale = (yield (0, import_headers.headers)()).get(LOCALE_HEADER);
      if (!locale) {
        locale = (_a = (yield (0, import_headers.cookies)()).get(LOCALE_COOKIE)) == null ? void 0 : _a.value;
      }
    } catch (e) {
      throw new Error(
        "Could not find locale while pre-rendering page, make sure you called `setStaticParamsLocale` at the top of your pages"
      );
    }
  }
  if (!locale) {
    error(`Locale not found in headers or cookies, returning "notFound()"`);
    (0, import_navigation.notFound)();
  }
  return locale;
}));

// src/app/server/create-get-current-locale.ts
function createGetCurrentLocale() {
  return function getCurrentLocale() {
    return getLocaleCache();
  };
}

// src/common/create-t.ts
var import_react2 = require("react");
function createT(context, scope) {
  const { localeContent, fallbackLocale } = context;
  const content = fallbackLocale && typeof localeContent === "string" ? fallbackLocale : Object.assign(fallbackLocale != null ? fallbackLocale : {}, localeContent);
  const pluralKeys = new Set(
    Object.keys(content).filter((key) => key.includes("#")).map((key) => key.split("#", 1)[0])
  );
  const pluralRules = new Intl.PluralRules(context.locale);
  function getPluralKey(count) {
    if (count === 0)
      return "zero";
    return pluralRules.select(count);
  }
  function t(key, ...params) {
    var _a, _b;
    const paramObject = params[0];
    let isPlural = false;
    if (paramObject && "count" in paramObject) {
      const isPluralKey = scope ? pluralKeys.has(`${scope}.${key}`) : pluralKeys.has(key);
      if (isPluralKey) {
        key = `${key}#${getPluralKey(paramObject.count)}`;
        isPlural = true;
      }
    }
    let value = scope ? content[`${scope}.${key}`] : content[key];
    if (!value && isPlural) {
      const baseKey = key.split("#", 1)[0];
      value = (_a = content[`${baseKey}#other`] || key) == null ? void 0 : _a.toString();
    } else {
      value = (_b = value || key) == null ? void 0 : _b.toString();
    }
    if (!paramObject) {
      return value;
    }
    let isString = true;
    const result = value == null ? void 0 : value.split(/({[^}]*})/).map((part, index) => {
      const match = part.match(/{(.*)}/);
      if (match) {
        const param = match[1];
        const paramValue = paramObject[param];
        if ((0, import_react2.isValidElement)(paramValue)) {
          isString = false;
          return (0, import_react2.cloneElement)(paramValue, { key: `${String(param)}-${index}` });
        }
        return paramValue;
      }
      return part;
    });
    return isString ? result == null ? void 0 : result.join("") : result;
  }
  return t;
}

// src/common/flatten-locale.ts
var flattenLocale = (locale, prefix = "") => Object.entries(locale).reduce(
  (prev, [name, value]) => __spreadValues(__spreadValues({}, prev), typeof value === "string" ? { [prefix + name]: value } : flattenLocale(value, `${prefix}${name}.`)),
  {}
);

// src/app/server/create-get-i18n.ts
function createGetI18n(locales, config) {
  const localeCache = /* @__PURE__ */ new Map();
  return function getI18n() {
    return __async(this, null, function* () {
      const locale = yield getLocaleCache();
      const cached = localeCache.get(locale);
      if (cached) {
        return yield cached;
      }
      const localeFnPromise = (() => __async(this, null, function* () {
        const localeModule = yield locales[locale]();
        return createT(
          {
            localeContent: flattenLocale(localeModule.default),
            fallbackLocale: config.fallbackLocale ? flattenLocale(config.fallbackLocale) : void 0,
            locale
          },
          void 0
        );
      }))();
      localeCache.set(locale, localeFnPromise);
      return yield localeFnPromise;
    });
  };
}

// src/app/server/create-get-scoped-i18n.ts
function createGetScopedI18n(locales, config) {
  const localeCache = /* @__PURE__ */ new Map();
  return function getScopedI18n(scope) {
    return __async(this, null, function* () {
      const locale = yield getLocaleCache();
      const cacheKey = `${locale}-${scope}`;
      const cached = localeCache.get(cacheKey);
      if (cached) {
        return yield cached;
      }
      const localeFnPromise = (() => __async(this, null, function* () {
        const localeModule = yield locales[locale]();
        return createT(
          {
            localeContent: flattenLocale(localeModule.default),
            fallbackLocale: config.fallbackLocale ? flattenLocale(config.fallbackLocale) : void 0,
            locale
          },
          scope
        );
      }))();
      localeCache.set(cacheKey, localeFnPromise);
      return yield localeFnPromise;
    });
  };
}

// src/app/server/create-get-static-params.ts
function createGetStaticParams(locales, config) {
  return function getStaticParams() {
    return Object.keys(locales).map((locale) => {
      var _a;
      return {
        [(_a = config.segmentName) != null ? _a : DEFAULT_SEGMENT_NAME]: locale
      };
    });
  };
}

// src/app/server/index.ts
function createI18nServer(locales, config = {}) {
  const getI18n = createGetI18n(locales, config);
  const getScopedI18n = createGetScopedI18n(locales, config);
  const getCurrentLocale = createGetCurrentLocale();
  const getStaticParams = createGetStaticParams(locales, config);
  return {
    getI18n,
    getScopedI18n,
    getCurrentLocale,
    getStaticParams
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createI18nServer,
  setStaticParamsLocale
});
