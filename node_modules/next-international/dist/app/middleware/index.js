"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/app/middleware/index.ts
var middleware_exports = {};
__export(middleware_exports, {
  createI18nMiddleware: () => createI18nMiddleware
});
module.exports = __toCommonJS(middleware_exports);
var import_server = require("next/server");

// src/common/constants.ts
var LOCALE_HEADER = "X-Next-Locale";
var LOCALE_COOKIE = "Next-Locale";

// src/helpers/log.ts
function log(type, message) {
  if (process.env.NODE_ENV !== "production") {
    console[type](`[next-international] ${message}`);
  }
  return null;
}
var warn = (message) => log("warn", message);

// src/app/middleware/index.ts
var DEFAULT_STRATEGY = "redirect";
function createI18nMiddleware(config) {
  return function I18nMiddleware(request) {
    var _a, _b, _c;
    const locale = (_a = localeFromRequest(config.locales, request, config.resolveLocaleFromRequest)) != null ? _a : config.defaultLocale;
    const nextUrl = request.nextUrl;
    if (noLocalePrefix(config.locales, nextUrl.pathname)) {
      nextUrl.pathname = `/${locale}${nextUrl.pathname}`;
      const strategy = (_b = config.urlMappingStrategy) != null ? _b : DEFAULT_STRATEGY;
      if (strategy === "rewrite" || strategy === "rewriteDefault" && locale === config.defaultLocale) {
        const response2 = import_server.NextResponse.rewrite(nextUrl);
        return addLocaleToResponse(request, response2, locale);
      } else {
        if (!["redirect", "rewriteDefault"].includes(strategy)) {
          warn(`Invalid urlMappingStrategy: ${strategy}. Defaulting to redirect.`);
        }
        const response2 = import_server.NextResponse.redirect(nextUrl);
        return addLocaleToResponse(request, response2, locale);
      }
    }
    let response = import_server.NextResponse.next();
    const pathnameLocale = (_c = nextUrl.pathname.split("/", 2)) == null ? void 0 : _c[1];
    if (!pathnameLocale || config.locales.includes(pathnameLocale)) {
      if (config.urlMappingStrategy === "rewrite" && pathnameLocale !== locale || config.urlMappingStrategy === "rewriteDefault" && (pathnameLocale !== locale || pathnameLocale === config.defaultLocale)) {
        const pathnameWithoutLocale = nextUrl.pathname.slice(pathnameLocale.length + 1);
        const newUrl = new URL(pathnameWithoutLocale || "/", request.url);
        newUrl.search = nextUrl.search;
        response = import_server.NextResponse.redirect(newUrl);
      }
      return addLocaleToResponse(request, response, pathnameLocale != null ? pathnameLocale : config.defaultLocale);
    }
    return response;
  };
}
function localeFromRequest(locales, request, resolveLocaleFromRequest = defaultResolveLocaleFromRequest) {
  var _a, _b;
  const locale = (_b = (_a = request.cookies.get(LOCALE_COOKIE)) == null ? void 0 : _a.value) != null ? _b : resolveLocaleFromRequest(request);
  if (!locale || !locales.includes(locale)) {
    return null;
  }
  return locale;
}
var defaultResolveLocaleFromRequest = (request) => {
  var _a, _b, _c;
  const header = request.headers.get("Accept-Language");
  const locale = (_c = (_b = (_a = header == null ? void 0 : header.split(",", 1)) == null ? void 0 : _a[0]) == null ? void 0 : _b.split("-", 1)) == null ? void 0 : _c[0];
  return locale != null ? locale : null;
};
function noLocalePrefix(locales, pathname) {
  return locales.every((locale) => {
    return !(pathname === `/${locale}` || pathname.startsWith(`/${locale}/`));
  });
}
function addLocaleToResponse(request, response, locale) {
  var _a;
  response.headers.set(LOCALE_HEADER, locale);
  if (((_a = request.cookies.get(LOCALE_COOKIE)) == null ? void 0 : _a.value) !== locale) {
    response.cookies.set(LOCALE_COOKIE, locale, { sameSite: "strict" });
  }
  return response;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createI18nMiddleware
});
