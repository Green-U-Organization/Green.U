"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/app/client/index.ts
var client_exports = {};
__export(client_exports, {
  createI18nClient: () => createI18nClient
});
module.exports = __toCommonJS(client_exports);
var import_client_only = require("client-only");

// src/app/client/create-i18n-provider-client.tsx
var import_navigation = require("next/navigation");
var import_react = __toESM(require("react"));

// src/common/flatten-locale.ts
var flattenLocale = (locale, prefix = "") => Object.entries(locale).reduce(
  (prev, [name, value]) => __spreadValues(__spreadValues({}, prev), typeof value === "string" ? { [prefix + name]: value } : flattenLocale(value, `${prefix}${name}.`)),
  {}
);

// src/helpers/log.ts
function log(type, message) {
  if (process.env.NODE_ENV !== "production") {
    console[type](`[next-international] ${message}`);
  }
  return null;
}
var warn = (message) => log("warn", message);
var error = (message) => log("error", message);

// src/app/client/create-i18n-provider-client.tsx
var localesCache = /* @__PURE__ */ new Map();
function createI18nProviderClient(I18nClientContext, locales, fallbackLocale) {
  function I18nProvider({ locale, importLocale, children }) {
    var _a;
    const clientLocale = (_a = localesCache.get(locale)) != null ? _a : (0, import_react.use)(importLocale).default;
    if (!localesCache.has(locale)) {
      localesCache.set(locale, clientLocale);
    }
    const value = (0, import_react.useMemo)(
      () => ({
        localeContent: flattenLocale(clientLocale),
        fallbackLocale: fallbackLocale ? flattenLocale(fallbackLocale) : void 0,
        locale
      }),
      [clientLocale, locale]
    );
    return /* @__PURE__ */ import_react.default.createElement(I18nClientContext.Provider, { value }, children);
  }
  return function I18nProviderWrapper({ locale, fallback, children }) {
    const importFnLocale = locales[locale];
    if (!importFnLocale) {
      error(`The locale '${locale}' is not supported. Defined locales are: [${Object.keys(locales).join(", ")}].`);
      (0, import_navigation.notFound)();
    }
    return /* @__PURE__ */ import_react.default.createElement(import_react.Suspense, { fallback }, /* @__PURE__ */ import_react.default.createElement(I18nProvider, { locale, importLocale: importFnLocale() }, children));
  };
}

// src/app/client/index.ts
var import_react6 = require("react");

// src/common/create-use-i18n.ts
var import_react3 = require("react");

// src/common/create-t.ts
var import_react2 = require("react");
function createT(context, scope) {
  const { localeContent, fallbackLocale } = context;
  const content = fallbackLocale && typeof localeContent === "string" ? fallbackLocale : Object.assign(fallbackLocale != null ? fallbackLocale : {}, localeContent);
  const pluralKeys = new Set(
    Object.keys(content).filter((key) => key.includes("#")).map((key) => key.split("#", 1)[0])
  );
  const pluralRules = new Intl.PluralRules(context.locale);
  function getPluralKey(count) {
    if (count === 0)
      return "zero";
    return pluralRules.select(count);
  }
  function t(key, ...params) {
    var _a, _b;
    const paramObject = params[0];
    let isPlural = false;
    if (paramObject && "count" in paramObject) {
      const isPluralKey = scope ? pluralKeys.has(`${scope}.${key}`) : pluralKeys.has(key);
      if (isPluralKey) {
        key = `${key}#${getPluralKey(paramObject.count)}`;
        isPlural = true;
      }
    }
    let value = scope ? content[`${scope}.${key}`] : content[key];
    if (!value && isPlural) {
      const baseKey = key.split("#", 1)[0];
      value = (_a = content[`${baseKey}#other`] || key) == null ? void 0 : _a.toString();
    } else {
      value = (_b = value || key) == null ? void 0 : _b.toString();
    }
    if (!paramObject) {
      return value;
    }
    let isString = true;
    const result = value == null ? void 0 : value.split(/({[^}]*})/).map((part, index) => {
      const match = part.match(/{(.*)}/);
      if (match) {
        const param = match[1];
        const paramValue = paramObject[param];
        if ((0, import_react2.isValidElement)(paramValue)) {
          isString = false;
          return (0, import_react2.cloneElement)(paramValue, { key: `${String(param)}-${index}` });
        }
        return paramValue;
      }
      return part;
    });
    return isString ? result == null ? void 0 : result.join("") : result;
  }
  return t;
}

// src/common/create-use-i18n.ts
function createUsei18n(I18nClientContext) {
  return function useI18n() {
    const context = (0, import_react3.useContext)(I18nClientContext);
    if (!context) {
      throw new Error("`useI18n` must be used inside `I18nProvider`");
    }
    return (0, import_react3.useMemo)(() => createT(context, void 0), [context]);
  };
}

// src/common/create-use-scoped-i18n.ts
var import_react4 = require("react");
function createScopedUsei18n(I18nClientContext) {
  return function useScopedI18n(scope) {
    const context = (0, import_react4.useContext)(I18nClientContext);
    if (!context) {
      throw new Error("`useI18n` must be used inside `I18nProvider`");
    }
    return (0, import_react4.useMemo)(() => createT(context, scope), [context, scope]);
  };
}

// src/app/client/create-use-change-locale.ts
var import_navigation2 = require("next/navigation");
function createUseChangeLocale(useCurrentLocale, locales, config) {
  return function useChangeLocale(changeLocaleConfig) {
    const { push, refresh } = (0, import_navigation2.useRouter)();
    const currentLocale = useCurrentLocale();
    const path = (0, import_navigation2.usePathname)();
    const searchParams = (changeLocaleConfig == null ? void 0 : changeLocaleConfig.preserveSearchParams) ? (0, import_navigation2.useSearchParams)().toString() : void 0;
    const finalSearchParams = searchParams ? `?${searchParams}` : "";
    let pathWithoutLocale = path;
    if (config.basePath) {
      pathWithoutLocale = pathWithoutLocale.replace(config.basePath, "");
    }
    if (pathWithoutLocale.startsWith(`/${currentLocale}/`)) {
      pathWithoutLocale = pathWithoutLocale.replace(`/${currentLocale}/`, "/");
    } else if (pathWithoutLocale === `/${currentLocale}`) {
      pathWithoutLocale = "/";
    }
    return function changeLocale(newLocale) {
      if (newLocale === currentLocale)
        return;
      const importFnLocale = locales[newLocale];
      if (!importFnLocale) {
        warn(`The locale '${newLocale}' is not supported. Defined locales are: [${Object.keys(locales).join(", ")}].`);
        return;
      }
      importFnLocale().then((module2) => {
        localesCache.set(newLocale, module2.default);
        push(`/${newLocale}${pathWithoutLocale}${finalSearchParams}`);
        refresh();
      });
    };
  };
}

// src/common/create-define-locale.ts
function createDefineLocale() {
  return function defineLocale(locale) {
    return locale;
  };
}

// src/app/client/create-use-current-locale.ts
var import_navigation3 = require("next/navigation");
var import_react5 = require("react");

// src/common/constants.ts
var DEFAULT_SEGMENT_NAME = "locale";

// src/app/client/create-use-current-locale.ts
function createUseCurrentLocale(locales, config) {
  return function useCurrentLocale() {
    var _a;
    const params = (0, import_navigation3.useParams)();
    const segment = params[(_a = config.segmentName) != null ? _a : DEFAULT_SEGMENT_NAME];
    return (0, import_react5.useMemo)(() => {
      for (const locale of locales) {
        if (segment === locale) {
          return locale;
        }
      }
      error(`Locale "${segment}" not found in locales (${locales.join(", ")}), returning "notFound()"`);
      (0, import_navigation3.notFound)();
    }, [segment]);
  };
}

// src/app/client/index.ts
function createI18nClient(locales, config = {}) {
  const localesKeys = Object.keys(locales);
  const I18nClientContext = (0, import_react6.createContext)(null);
  const useCurrentLocale = createUseCurrentLocale(localesKeys, config);
  const I18nProviderClient = createI18nProviderClient(I18nClientContext, locales, config.fallbackLocale);
  const useI18n = createUsei18n(I18nClientContext);
  const useScopedI18n = createScopedUsei18n(I18nClientContext);
  const useChangeLocale = createUseChangeLocale(useCurrentLocale, locales, config);
  const defineLocale = createDefineLocale();
  return {
    useI18n,
    useScopedI18n,
    I18nProviderClient,
    I18nClientContext,
    useChangeLocale,
    defineLocale,
    useCurrentLocale
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createI18nClient
});
