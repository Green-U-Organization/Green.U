name: Build and deploy ASP.Net Core app to Azure Web App - GreenU
env:
  AZURE_WEBAPP_NAME: GreenU   # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '9'
on:
  push:
    branches:
      - main
  workflow_dispatch:
jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'
      
      - name: Build with dotnet
        run: dotnet build greenUDB/GreenUApi.csproj --configuration Release
      
      - name: dotnet publish
        run: dotnet publish greenUDB/GreenUApi.csproj -c Release -o "${{ github.workspace }}/published_app"
      
      - name: Créer un fichier ZIP propre
        run: |
          Remove-Item -Force published_app.zip -ErrorAction Ignore
          Compress-Archive -Path "${{ github.workspace }}/published_app/*" -DestinationPath "${{ github.workspace }}/published_app.zip"
        shell: pwsh
      
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: net-app
          path: published_app.zip

  deploy:
    runs-on: windows-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: net-app
          path: ./artifact
      
      - name: Vérifier le fichier ZIP téléchargé
        run: |
          Get-ChildItem "./artifact"
          if (Test-Path "./artifact/published_app.zip") {
              Write-Host "✅ Le fichier ZIP est présent"
          } else {
              Write-Host "❌ Le fichier ZIP est manquant"
              exit 1
          }
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_011C3F26CC2040A1B6404AC04C50F6FD }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_BE441480952545C6B739805513D0B40A }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_C4A3CFBA85F549C7A321609D8B9CF832 }}
          password: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_8CC0A56830A3408DB06FE98F1666B4E9  }}
      
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'GreenU'
          slot-name: 'Production'
          package: './artifact/published_app.zip'
          clean: true

      - name: Get Azure WebApp Deployment Logs
        if: failure()
        run: |
          # Connexion à Azure CLI (si ce n'est pas déjà fait)
          az login --service-principal -u ${{ secrets.AZUREAPPSERVICE_CLIENTID_011C3F26CC2040A1B6404AC04C50F6FD }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZUREAPPSERVICE_TENANTID_BE441480952545C6B739805513D0B40A }}
          
          # Récupérer les logs de déploiement
          az webapp log show -n GreenU
