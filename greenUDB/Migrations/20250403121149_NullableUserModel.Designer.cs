// <auto-generated />
using System;
using GreenUApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GreenUApi.Migrations
{
    [DbContext(typeof(GreenUDB))]
<<<<<<< HEAD:greenUDB/Migrations/20250402072216_UppercaseProblem.Designer.cs
<<<<<<<< HEAD:greenUDB/Migrations/20250402084330_InitialCreate.Designer.cs
    [Migration("20250402084330_InitialCreate")]
    partial class InitialCreate
========
    [Migration("20250402072216_UppercaseProblem")]
    partial class UppercaseProblem
>>>>>>>> backend-dev:greenUDB/Migrations/20250402072216_UppercaseProblem.Designer.cs
=======
    [Migration("20250403121149_NullableUserModel")]
    partial class NullableUserModel
>>>>>>> backend-dev:greenUDB/Migrations/20250403121149_NullableUserModel.Designer.cs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("GreenUApi.Models.Contributor", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<bool>("Admin")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at");

                    b.Property<long>("GardenId")
                        .HasColumnType("bigint")
                        .HasColumnName("Garden_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("User_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GardenId" }, "fk_Contributor_Garden_id");

                    b.HasIndex(new[] { "UserId" }, "fk_Contributor_User_id");

                    b.ToTable("Contributor", (string)null);
                });

            modelBuilder.Entity("GreenUApi.Models.Crop", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at");

                    b.Property<DateOnly?>("Harvesting")
                        .HasColumnType("date");

                    b.Property<long?>("Icon")
                        .HasColumnType("bigint");

                    b.Property<long?>("LineId")
                        .HasColumnType("bigint")
                        .HasColumnName("Line_id");

                    b.Property<long?>("PlantNurseryId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly?>("Planting")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("Sowing")
                        .HasColumnType("date");

                    b.Property<string>("Variety")
                        .HasColumnType("text");

                    b.Property<string>("Vegetable")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "LineId" }, "fk_Crops_Line_id");

                    b.ToTable("Crops");
                });

            modelBuilder.Entity("GreenUApi.Models.Follower", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long>("FollowerId")
                        .HasColumnType("bigint")
                        .HasColumnName("Follower_id");

                    b.Property<long?>("GardenId")
                        .HasColumnType("bigint")
                        .HasColumnName("Garden_id");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("User_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FollowerId" }, "fk_Follower_Follower_id");

                    b.HasIndex(new[] { "GardenId" }, "fk_Follower_Garden_id");

                    b.HasIndex(new[] { "UserId" }, "fk_Follower_User_id");

                    b.ToTable("Follower", (string)null);
                });

            modelBuilder.Entity("GreenUApi.Models.Garden", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint")
                        .HasColumnName("Admin_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Latitude")
                        .HasColumnType("bigint");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<long>("Longitude")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Privacy")
<<<<<<< HEAD:greenUDB/Migrations/20250402072216_UppercaseProblem.Designer.cs
<<<<<<<< HEAD:greenUDB/Migrations/20250402084330_InitialCreate.Designer.cs
                        .HasColumnType("int")
                        .HasColumnName("privacy");
========
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");
>>>>>>>> backend-dev:greenUDB/Migrations/20250402072216_UppercaseProblem.Designer.cs
=======
                        .HasColumnType("int")
                        .HasColumnName("privacy");
>>>>>>> backend-dev:greenUDB/Migrations/20250403121149_NullableUserModel.Designer.cs

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("Width")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "AuthorId" }, "fk_Garden_Admin_id");

                    b.ToTable("Garden", (string)null);
                });

            modelBuilder.Entity("GreenUApi.Models.Line", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at");

                    b.Property<long?>("Length")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParcelId")
                        .HasColumnType("bigint")
                        .HasColumnName("Parcel_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ParcelId" }, "fk_Line_Parcel_id");

                    b.ToTable("Line", (string)null);
                });

            modelBuilder.Entity("GreenUApi.Models.Log", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint")
                        .HasColumnName("Author_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<long?>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("Created_at");

                    b.Property<long?>("CropId")
                        .HasColumnType("bigint")
                        .HasColumnName("Crop_id");

                    b.Property<long?>("GardenId")
                        .HasColumnType("bigint")
                        .HasColumnName("Garden_id");

                    b.Property<long?>("LineId")
                        .HasColumnType("bigint")
                        .HasColumnName("Line_id");

                    b.Property<long?>("ParcelId")
                        .HasColumnType("bigint")
                        .HasColumnName("Parcel_id");

                    b.Property<long?>("PlantNurseryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AuthorId" }, "fk_Logs_Author_id");

                    b.HasIndex(new[] { "CropId" }, "fk_Logs_Crop_id");

                    b.HasIndex(new[] { "GardenId" }, "fk_Logs_Garden_id");

                    b.HasIndex(new[] { "LineId" }, "fk_Logs_Line_id");

                    b.HasIndex(new[] { "ParcelId" }, "fk_Logs_Parcel_id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("GreenUApi.Models.Parcel", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at");

                    b.Property<long?>("GardenId")
                        .HasColumnType("bigint")
                        .HasColumnName("Garden_id");

                    b.Property<double?>("Length")
                        .HasColumnType("double");

                    b.Property<long?>("NLine")
                        .HasColumnType("bigint")
                        .HasColumnName("N_line");

                    b.Property<double?>("ParcelAngle")
                        .HasColumnType("double");

                    b.Property<long?>("Width")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GardenId" }, "fk_Parcel_Garden_id");

                    b.ToTable("Parcel", (string)null);
                });

            modelBuilder.Entity("GreenUApi.Models.PlantNursery", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("gardenId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("PlantNursery");
                });

            modelBuilder.Entity("GreenUApi.Models.TagsInterest", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long?>("GardenId")
                        .HasColumnType("bigint")
                        .HasColumnName("Garden_id");

                    b.Property<string>("Hashtag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("User_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GardenId" }, "fk_Tags_Garden_id");

                    b.HasIndex(new[] { "UserId" }, "fk_Tags_User_id");

                    b.ToTable("Tags_interest", (string)null);
                });

            modelBuilder.Entity("GreenUApi.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Is_admin");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Level")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text")
                        .HasColumnName("Postal_code");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("text")
                        .HasColumnName("Profile_image");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Xp")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("GreenUApi.Models.Contributor", b =>
                {
                    b.HasOne("GreenUApi.Models.Garden", "Garden")
                        .WithMany("Contributors")
                        .HasForeignKey("GardenId")
                        .IsRequired()
                        .HasConstraintName("fk_Contributor_Garden_id");

                    b.HasOne("GreenUApi.Models.User", "User")
                        .WithMany("Contributors")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_Contributor_User_id");

                    b.Navigation("Garden");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GreenUApi.Models.Crop", b =>
                {
                    b.HasOne("GreenUApi.Models.Line", "Line")
                        .WithMany("Crops")
                        .HasForeignKey("LineId")
                        .HasConstraintName("fk_Crops_Line_id");

                    b.Navigation("Line");
                });

            modelBuilder.Entity("GreenUApi.Models.Follower", b =>
                {
                    b.HasOne("GreenUApi.Models.User", "FollowerNavigation")
                        .WithMany("FollowerFollowerNavigations")
                        .HasForeignKey("FollowerId")
                        .IsRequired()
                        .HasConstraintName("fk_Follower_Follower_id");

                    b.HasOne("GreenUApi.Models.Garden", "Garden")
                        .WithMany("Followers")
                        .HasForeignKey("GardenId")
                        .HasConstraintName("fk_Follower_Garden_id");

                    b.HasOne("GreenUApi.Models.User", "User")
                        .WithMany("FollowerUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_Follower_User_id");

                    b.Navigation("FollowerNavigation");

                    b.Navigation("Garden");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GreenUApi.Models.Garden", b =>
                {
                    b.HasOne("GreenUApi.Models.User", null)
                        .WithMany("Gardens")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("GreenUApi.Models.Line", b =>
                {
                    b.HasOne("GreenUApi.Models.Parcel", "Parcel")
                        .WithMany("Lines")
                        .HasForeignKey("ParcelId")
                        .HasConstraintName("fk_Line_Parcel_id");

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("GreenUApi.Models.Log", b =>
                {
                    b.HasOne("GreenUApi.Models.User", "Author")
                        .WithMany("Logs")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("fk_Logs_Author_id");

                    b.HasOne("GreenUApi.Models.Crop", "Crop")
                        .WithMany("Logs")
                        .HasForeignKey("CropId")
                        .HasConstraintName("fk_Logs_Crop_id");

                    b.HasOne("GreenUApi.Models.Garden", "Garden")
                        .WithMany("Logs")
                        .HasForeignKey("GardenId")
                        .HasConstraintName("fk_Logs_Garden_id");

                    b.HasOne("GreenUApi.Models.Line", "Line")
                        .WithMany("Logs")
                        .HasForeignKey("LineId")
                        .HasConstraintName("fk_Logs_Line_id");

                    b.HasOne("GreenUApi.Models.Parcel", "Parcel")
                        .WithMany("Logs")
                        .HasForeignKey("ParcelId")
                        .HasConstraintName("fk_Logs_Parcel_id");

                    b.Navigation("Author");

                    b.Navigation("Crop");

                    b.Navigation("Garden");

                    b.Navigation("Line");

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("GreenUApi.Models.Parcel", b =>
                {
                    b.HasOne("GreenUApi.Models.Garden", "Garden")
                        .WithMany("Parcels")
                        .HasForeignKey("GardenId")
                        .HasConstraintName("fk_Parcel_Garden_id");

                    b.Navigation("Garden");
                });

            modelBuilder.Entity("GreenUApi.Models.TagsInterest", b =>
                {
                    b.HasOne("GreenUApi.Models.Garden", "Garden")
                        .WithMany("TagsInterests")
                        .HasForeignKey("GardenId")
                        .HasConstraintName("fk_Tags_Garden_id");

                    b.HasOne("GreenUApi.Models.User", "User")
                        .WithMany("TagsInterests")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_Tags_User_id");

                    b.Navigation("Garden");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GreenUApi.Models.Crop", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("GreenUApi.Models.Garden", b =>
                {
                    b.Navigation("Contributors");

                    b.Navigation("Followers");

                    b.Navigation("Logs");

                    b.Navigation("Parcels");

                    b.Navigation("TagsInterests");
                });

            modelBuilder.Entity("GreenUApi.Models.Line", b =>
                {
                    b.Navigation("Crops");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("GreenUApi.Models.Parcel", b =>
                {
                    b.Navigation("Lines");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("GreenUApi.Models.User", b =>
                {
                    b.Navigation("Contributors");

                    b.Navigation("FollowerFollowerNavigations");

                    b.Navigation("FollowerUsers");

                    b.Navigation("Gardens");

                    b.Navigation("Logs");

                    b.Navigation("TagsInterests");
                });
#pragma warning restore 612, 618
        }
    }
}
