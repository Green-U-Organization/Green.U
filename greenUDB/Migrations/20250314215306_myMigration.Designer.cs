// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GreenUApi.Migrations
{
    [DbContext(typeof(greenUDB))]
    [Migration("20250314215306_myMigration")]
    partial class myMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("accesToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("accesToken_expire_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("accountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("impersonateBy")
                        .HasColumnType("longtext");

                    b.Property<string>("password")
                        .HasColumnType("longtext");

                    b.Property<string>("salt")
                        .HasColumnType("longtext");

                    b.Property<int>("providerId")
                        .HasColumnType("int");

                    b.Property<string>("refreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("refreshToken_expire_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("scope")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("update_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Domain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("description")
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Domain");
                });

            modelBuilder.Entity("Garden", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<float>("latitude")
                        .HasColumnType("float");

                    b.Property<float>("length")
                        .HasColumnType("float");

                    b.Property<float>("longitude")
                        .HasColumnType("float");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("update_at")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("width")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Garden");
                });

            modelBuilder.Entity("Line", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("parcelId")
                        .HasColumnType("int");

                    b.Property<short>("status")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("update_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("vegetableId")
                        .HasColumnType("int");

                    b.Property<float>("width")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.HasIndex("parcelId");

                    b.HasIndex("vegetableId");

                    b.ToTable("Line");
                });

            modelBuilder.Entity("Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("eventType")
                        .HasColumnType("longtext");

                    b.Property<string>("ip_adress")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("Param", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<short>("NotActive")
                        .HasColumnType("smallint");

                    b.Property<int>("domain_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("domain_id");

                    b.ToTable("Param");
                });

            modelBuilder.Entity("Parcel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("Garden")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("garden_id")
                        .HasColumnType("int");

                    b.Property<float>("height")
                        .HasColumnType("float");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("nbLignes")
                        .HasColumnType("int");

                    b.Property<float>("width")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.HasIndex("Garden");

                    b.ToTable("Parcel");
                });

            modelBuilder.Entity("Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("eventType")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("expire_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("impersonateBy")
                        .HasColumnType("longtext");

                    b.Property<string>("ip_adress")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("update_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("user_agent")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Todo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<short>("done")
                        .HasColumnType("smallint");

                    b.Property<int>("garden_id")
                        .HasColumnType("int");

                    b.Property<int>("lien_id")
                        .HasColumnType("int");

                    b.Property<int>("line_id")
                        .HasColumnType("int");

                    b.Property<int>("parcel_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("update_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.HasIndex("garden_id");

                    b.HasIndex("lien_id");

                    b.HasIndex("parcel_id");

                    b.ToTable("Todo");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("birthdate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("email")
                        .HasColumnType("longtext");

                    b.Property<int>("is_admin")
                        .HasColumnType("int");

                    b.Property<string>("lastname")
                        .HasColumnType("longtext");

                    b.Property<int>("level")
                        .HasColumnType("int");

                    b.Property<string>("login")
                        .HasColumnType("longtext");

                    b.Property<string>("password")
                        .HasColumnType("longtext");

                    b.Property<string>("postal_code")
                        .HasColumnType("longtext");

                    b.Property<string>("sexe")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("surname")
                        .HasColumnType("longtext");

                    b.Property<int>("xp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Vegetable", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("comments")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<short>("cultivationUnderShader")
                        .HasColumnType("smallint");

                    b.Property<short>("directSeeding")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("end_of_plenting")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("familyId")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.Property<DateTime>("start_of_plenting")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("start_of_sowing")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("variety")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("vegetable")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Vegetable");
                });

            modelBuilder.Entity("Verification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_at")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("expire_at")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("update_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Vérification");
                });

            modelBuilder.Entity("Account", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany("Account")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Garden", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany("Gardens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Line", b =>
                {
                    b.HasOne("Parcel", "parcel")
                        .WithMany("lines")
                        .HasForeignKey("parcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vegetable", "vegetable")
                        .WithMany("lines")
                        .HasForeignKey("vegetableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("parcel");

                    b.Navigation("vegetable");
                });

            modelBuilder.Entity("Log", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Param", b =>
                {
                    b.HasOne("Domain", "Domain")
                        .WithMany("Params")
                        .HasForeignKey("domain_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Domain");
                });

            modelBuilder.Entity("Parcel", b =>
                {
                    b.HasOne("Garden", "garden")
                        .WithMany("parcels")
                        .HasForeignKey("Garden")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("garden");
                });

            modelBuilder.Entity("Session", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany("Session")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Todo", b =>
                {
                    b.HasOne("Garden", "garden")
                        .WithMany("todos")
                        .HasForeignKey("garden_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Line", "line")
                        .WithMany("todos")
                        .HasForeignKey("lien_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parcel", "parcel")
                        .WithMany("todos")
                        .HasForeignKey("parcel_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("garden");

                    b.Navigation("line");

                    b.Navigation("parcel");
                });

            modelBuilder.Entity("Verification", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany("Verification")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain", b =>
                {
                    b.Navigation("Params");
                });

            modelBuilder.Entity("Garden", b =>
                {
                    b.Navigation("parcels");

                    b.Navigation("todos");
                });

            modelBuilder.Entity("Line", b =>
                {
                    b.Navigation("todos");
                });

            modelBuilder.Entity("Parcel", b =>
                {
                    b.Navigation("lines");

                    b.Navigation("todos");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("Gardens");

                    b.Navigation("Logs");

                    b.Navigation("Session");

                    b.Navigation("Verification");
                });

            modelBuilder.Entity("Vegetable", b =>
                {
                    b.Navigation("lines");
                });
#pragma warning restore 612, 618
        }
    }
}
